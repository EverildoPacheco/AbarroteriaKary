@* ================================
   USUARIOS / EDIT
   RUTA: Views/Usuarios/Edit.cshtml
   MODELO: UsuarioEditViewModel
   Estilo igual a Áreas/Puestos
   ================================= *@

@model AbarroteriaKary.ModelsPartial.UsuarioEditViewModel

@{
    ViewData["Title"] = "Editar Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var updatedOk = TempData["UpdatedOk"] as bool?;
    var updatedName = TempData["UpdatedName"] as string ?? "";
    var noChanges = TempData["NoChanges"] as bool?;
}

<div class="ak-page">
    <!-- Título -->
    <div class="ak-header container-fluid px-3 px-md-4">
        <h1 class="ak-form-title m-1 mb-4">Editar usuario</h1>
    </div>

    <!-- Formulario -->
    <div class="ak-main">
        <div class="container-fluid px-3 px-md-4">

            <form asp-action="Edit" asp-route-id="@Model.UsuarioId" method="post" id="form-edit-usuario" novalidate>
                @Html.AntiForgeryToken()

                <!-- Resumen de validación -->
                <div class="alert alert-danger mb-3" asp-validation-summary="All" role="alert"></div>

                <div class="card ak-card translucent shadow-sm w-100">
                    <div class="card-body ak-form">

                        <!-- Código (readonly) -->
                        <div class="mb-3">
                            <label asp-for="UsuarioId" class="form-label">Código</label>
                            <input asp-for="UsuarioId" class="form-control" readonly />
                        </div>

                        <!-- Usuario (login) -->
                        <div class="mb-3">
                            <label asp-for="NombreUsuario" class="form-label">Usuario*</label>
                            <input asp-for="NombreUsuario" class="form-control" placeholder="Ej. JPEREZ" />
                            <span asp-validation-for="NombreUsuario" class="text-danger"></span>
                        </div>

                        <!-- Rol (combo) -->
                        <div class="mb-3">
                            <label asp-for="RolId" class="form-label">Rol*</label>
                            <select asp-for="RolId" class="form-select" asp-items="Model.Roles">
                                <option value="">-- Seleccione un rol --</option>
                            </select>
                            <span asp-validation-for="RolId" class="text-danger"></span>
                        </div>

                        <!-- Empleado (solo lectura: select deshabilitado + hidden para postear valor) -->
                        <div class="mb-3">
                            <label asp-for="EmpleadoId" class="form-label">Empleado</label>
                            <select asp-for="EmpleadoId" class="form-select" asp-items="Model.EmpleadosDisponibles" disabled></select>
                            <input type="hidden" asp-for="EmpleadoId" />
                            <div class="form-text">El empleado asociado no se puede cambiar desde esta pantalla.</div>
                        </div>

                        <!-- Estado (checkbox cuadrado negro) -->
                        <div class="form-check mb-3 d-flex align-items-center gap-2">
                            <input class="form-check-input ak-checkbox" asp-for="EstadoActivo" />
                            <label class="form-check-label fw-bold" asp-for="EstadoActivo"></label>
                        </div>




                        <!-- Restablecer contraseña (toggle) -->
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input" type="checkbox" asp-for="RestablecerPassword" id="chkResetPwd" />
                            <label class="form-check-label" for="chkResetPwd">Restablecer contraseña</label>
                        </div>

                        <!-- Caja de campos de contraseña (oculta por defecto) -->
                        <div id="pwdBox" class="d-none">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label asp-for="NuevaContraseña" class="form-label">Nueva contraseña</label>
                                    <input asp-for="NuevaContraseña" class="form-control" id="txtNewPwd" disabled />
                                    <span asp-validation-for="NuevaContraseña" class="text-danger"></span>
                                    <div class="form-text">Solo letras y números (sin caracteres especiales).</div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label asp-for="ConfirmarNuevaContraseña" class="form-label">Confirmar nueva contraseña</label>
                                    <input asp-for="ConfirmarNuevaContraseña" class="form-control" id="txtNewPwd2" disabled />
                                    <span asp-validation-for="ConfirmarNuevaContraseña" class="text-danger"></span>
                                </div>
                            </div>
                        </div>


                        @* (Opcional) mostrar la fecha de creación solo lectura
                        <div class="mb-3">
                            <label class="form-label">Fecha de creación</label>
                            <input class="form-control" value="@(Model.FechaRegistro?.ToString("dd/MM/yyyy HH:mm"))" readonly />
                        </div>
                        *@
                    </div>
                </div>

                <!-- Acciones -->
                <div class="card ak-card ak-actions-card w-100 mt-3">
                    <div class="card-body d-flex justify-content-center gap-5 flex-wrap">
                        <a asp-action="Index" class="btn btn-ak btn-ak-cancel js-leave">
                            <i class="fa-solid fa-xmark ak-icon"></i> Cancelar
                        </a>
                        <button type="reset" class="btn btn-ak btn-ak-success" id="btn-reset">
                            <i class="fa-solid fa-eraser ak-icon"></i> Restablecer
                        </button>
                        <button type="submit" class="btn btn-ak btn-ak-primary" id="btn-guardar">
                            <i class="fa-solid fa-floppy-disk ak-icon"></i> Guardar
                        </button>
                    </div>
                </div>

            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const form     = document.getElementById('form-edit-usuario');
            const btnSave  = document.getElementById('btn-guardar');
            const btnReset = document.getElementById('btn-reset');

            const chk     = document.getElementById('chkResetPwd');
            const box     = document.getElementById('pwdBox');
            const txtNew  = document.getElementById('txtNewPwd');
            const txtNew2 = document.getElementById('txtNewPwd2');

            // ===========================
            // 1) Toggle: caja de contraseña
            // ===========================
            function togglePwdBox() {
                const on = !!(chk && chk.checked);
                if (box) box.classList.toggle('d-none', !on);
                if (txtNew)  { txtNew.disabled  = !on; if (!on) txtNew.value  = ''; }
                if (txtNew2) { txtNew2.disabled = !on; if (!on) txtNew2.value = ''; }

                // Limpia mensajes de validación si ocultas
                if (!on) {
                    document
                      .querySelectorAll('[data-valmsg-for="NuevaContraseña"],[data-valmsg-for="ConfirmarNuevaContraseña"]')
                      .forEach(span => span.textContent = '');
                }
                if (on && txtNew) txtNew.focus();
            }
            togglePwdBox();
            chk?.addEventListener('change', togglePwdBox);

            // ===========================
            // 2) Guard anti-doble submit
            // ===========================
            if (form) {
                const hasJqVal = (typeof $ !== 'undefined') && !!$(form).data('validator');
                if (hasJqVal) {
                    $(form).on('invalid-form.validate', function () {
                        if (btnSave) btnSave.disabled = false;
                    });
                }
                form.addEventListener('submit', function () {
                    if (hasJqVal) {
                        if (!$(form).valid()) {
                            if (btnSave) btnSave.disabled = false;
                            return;
                        }
                    } else {
                        if (!form.checkValidity()) {
                            if (btnSave) btnSave.disabled = false;
                            return;
                        }
                    }
                    if (btnSave) btnSave.disabled = true;
                    isSubmitting = true; // ← para beforeunload
                    setPristine();        // si todo va bien, el server redirige
                });
            }

            // ===========================
            // 3) Guard "cambios sin guardar"
            // ===========================
            let isDirty = false;
            let isSubmitting = false;

            function markDirty()   { isDirty = true; }
            function setPristine() { isDirty = false; }

            // Marca "dirty" al primer cambio en cualquier input/select/textarea
            if (form) {
                form.querySelectorAll('input, select, textarea').forEach(el => {
                    el.addEventListener('change', markDirty, { once: true }); // con "once" basta un cambio para ensuciar
                });
            }

            // Reset limpia estado "dirty" y re-sincroniza toggle
            btnReset?.addEventListener('click', () => {
                setTimeout(() => { setPristine(); togglePwdBox(); }, 0);
            });

            // (A) Salida por enlaces internos con clase .js-leave
            function showLeaveConfirm(href) {
                const go = () => { window.location.href = href; };
                if (window.KarySwal?.confirm) {
                    KarySwal.confirm({
                        title: 'Hay cambios sin guardar',
                        text: 'Si sales ahora, perderás los cambios.',
                        icon: 'warning',
                        confirmText: 'Salir sin guardar',
                        cancelText: 'Cancelar',
                        onConfirm: go
                    });
                } else if (window.Swal) {
                    Swal.fire({
                        title: 'Hay cambios sin guardar',
                        text: 'Si sales ahora, perderás los cambios.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Salir sin guardar',
                        cancelButtonText: 'Cancelar',
                        reverseButtons: true
                    }).then(r => { if (r.isConfirmed) go(); });
                } else {
                    // Fallback nativo
                    if (confirm('Hay cambios sin guardar. ¿Salir de todos modos?')) go();
                }
            }

            document.querySelectorAll('.js-leave').forEach(a => {
                a.addEventListener('click', function (e) {
                    // Si no hay formulario o no está sucio, no intervenimos
                    if (!form || !isDirty) return;
                    // Si ya estás enviando (submit), no bloquear
                    if (isSubmitting) return;

                    e.preventDefault();
                    const href = this.getAttribute('href');
                    if (href) showLeaveConfirm(href);
                });
            });

            // (B) Salida de la página (cerrar pestaña / recargar / cambiar URL)
            window.addEventListener('beforeunload', function (e) {
                if (!isDirty || isSubmitting) return;
                e.preventDefault();
                e.returnValue = ''; // Requerido por los navegadores para mostrar el diálogo
            });

            // ===========================
            // 4) Modales con TempData (éxito & sin cambios)
            // ===========================
            @if ((TempData["UpdatedOk"] as bool?) == true)
            {
                    <text>
                    if (window.KarySwal?.saveSuccess) {
                        KarySwal.saveSuccess({
                            icon: 'success',
                            title: '¡Actualizado exitosamente!',
                            text: 'Los cambios de "@(TempData["UpdatedName"] as string ?? "")" se guardaron correctamente.',
                            confirmText: 'Aceptar',
                            showDenyButton: false,
                            indexUrl: '@Url.Action("Index", "Usuarios")'
                        });
                    } else if (window.Swal) {
                        Swal.fire({
                            icon: 'success',
                            title: '¡Actualizado exitosamente!',
                            text: 'Los cambios se guardaron correctamente.'
                        });
                    }
                    </text>
            }
            @if ((TempData["NoChanges"] as bool?) == true)
            {
                    <text>
                    if (window.KarySwal?.info) {
                        KarySwal.info({
                            title: 'Sin cambios',
                            text: 'No se realizó ninguna modificación.',
                            confirmText: 'Aceptar',
                            redirectUrl: '@Url.Action("Index", "Usuarios")'
                        });
                    } else if (window.Swal) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin cambios',
                            text: 'No se realizó ninguna modificación.'
                        });
                    }
                    </text>
            }
        })();
    </script>
}
